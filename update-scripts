#!/usr/bin/env python3
import json
import os
import sys
import argparse

from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--dev", action="store_true", dest="dev", default=False,
                        help="Use unstable scripts from dev branch")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Print more output")
    return parser.parse_args()


# This script will update the postinstall scripts on an existing installation.
if __name__ == "__main__":
    if os.geteuid() == 0 and not path_exists("/tmp/.root_ok"):
        print_error("Please start the script as non-root/without sudo")
        exit(1)

    args = process_args()

    # Restart script as root
    if not os.geteuid() == 0:
        # create empty file to confirm script was started as non-root
        with open("/tmp/.root_ok", "w") as file:
            file.write("")
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # delete file to confirm script was started as root
    rmfile("/tmp/.root_ok")

    # delete old scripts tmp dir
    rmdir("/tmp/scripts-update")

    # download scripts from GitHub
    print_status("Downloading scripts from github")
    start_progress()  # start fake download progress
    if args.dev:
        # TODO: add dev branch
        pass
    else:
        bash("git clone --depth=1 https://github.com/eupnea-linux/postinstall-scripts.git "
             "/tmp/scripts-update/postinstall")
        bash("git clone --depth=1 https://github.com/eupnea-linux/audio-scripts.git "
             "/tmp/scripts-update/audio")
    stop_progress()  # stop fake download progress

    # Delete old scripts
    with open("/tmp/scripts-update/postinstall/configs/to-delete.conf", "r") as file:
        to_delete = file.readlines()
    for script in to_delete:
        if script.startswith("#"):
            continue
        else:
            rmfile(script)

    # Copy new scripts to /usr/local/bin
    print_status("Copying scripts and configs")
    # Copy postinstall scripts only
    for file in Path("/tmp/scripts-update/postinstall").iterdir():
        if file.is_file():
            if file.name == "LICENSE" or file.name == "README.md" or file.name == ".gitignore":
                continue  # dont copy license, readme and gitignore
            else:
                cpfile(file.absolute().as_posix(), f"/usr/local/bin/{file.name}")
    # Copy postinstall configs
    cpdir("/tmp/scripts-update/postinstall/configs", "/etc/eupnea")

    # Copy audio script
    cpfile("/tmp/scripts-update/audio/setup-audio", "/usr/local/bin/setup-audio")
    # Copy audio configs
    cpdir("/tmp/scripts-update/audio/configs", "/etc/eupnea")

    # Set versions in /etc/eupnea.json
    with open("/etc/eupnea.json", "r") as file:
        eupnea_json = json.load(file)
    # Read git latest commit hashes
    with open("/tmp/scripts-update/postinstall/.git/refs/heads/main", "r") as file:
        eupnea_json["postinstall_version"] = file.read()
    with open("/tmp/scripts-update/audio/.git/refs/heads/main", "r") as file:
        eupnea_json["audio_version"] = file.read()
    # Write new versions to /etc/eupnea.json
    with open("/etc/eupnea.json", "w") as file:
        json.dump(eupnea_json, file)

    # Re enable postinstall service
    print_status("Enabling postinstall service")
    bash("systemctl enable postinstall.service")

    print_header("Scripts updated successfully")
