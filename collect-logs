#!/usr/bin/env python3

import os
import sys
import argparse
import time

from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--audio", action="store_true", dest="audio_only", default=False,
                        help="Collect audio related logs only")
    parser.add_argument("-d", "--hardware-only", action="store_true", dest="hardware_only", default=False,
                        help="Collect hardware related logs only")
    return parser.parse_args()


def collect_audio_logs() -> None:
    def run_pulseaudio() -> None:
        try:
            bash("LANG=C pulseaudio -vvvv --log-time=1 > /tmp/logs-eupnea/pulseaudio_verbose.log 2>&1")
        except subprocess.CalledProcessError:
            print_warning("Pulseaudio exited with an error")
            with open("/tmp/logs-eupnea/pulseaudio_fail.log", "w") as file:
                file.write(bash("systemctl --user status pulseaudio*"))

    def run_pipewire() -> None:
        try:
            bash("LANG=C pipewire -vvvv > /tmp/logs-eupnea/pipewire_verbose.log 2>&1")
        except subprocess.CalledProcessError:
            print_warning("Pipewire exited with an error")
            with open("/tmp/logs-eupnea/pipewire_fail.log", "w") as file:
                file.write(bash("systemctl --user status pipewire*"))

    print_status("Running alsa-info")
    with open("/tmp/logs-eupnea/alsa-info.log", "w") as f:
        try:
            f.write(bash("LANG=C alsa-info --stdout --with-aplay --with-amixer --with-alsactl --with-configs "
                         "--with-devices --with-packages"))
        except subprocess.CalledProcessError:
            print_warning("Trying alternative alsa-info name")
            f.write(bash("LANG=C alsa-info.sh --stdout --with-aplay --with-amixer --with-alsactl --with-configs "
                         "--with-devices --with-packages"))

    print_status("Collecting pulseaudio logs")
    # Check if pulseaudio is installed
    if path_exists("/usr/bin/pulseaudio"):
        # get startup pulseaudio logs
        with open("/tmp/logs-eupnea/pulseaudio_startup.log", "w") as file:
            file.write(bash("systemctl --user status pulseaudio*"))
        # manually start pulseaudio and get verbose logs
        bash("systemctl --user stop pulseaudio*")
        Thread(target=run_pulseaudio, daemon=True).start()
        sleep(10)
        bash("killall pulseaudio")
        # restart pulseaudio
        try:
            bash("systemctl --user start pulseaudio")
        except subprocess.CalledProcessError:
            pass
    else:
        print_warning("Pulseaudio is not installed, skipping")

    print_status("Collecting pipewire logs")
    if path_exists("/usr/bin/pipewire"):
        with open("/tmp/logs-eupnea/pipewire_startup.log", "w") as file:
            file.write(bash("systemctl --user status pipewire*"))
        with open("/tmp/logs-eupnea/wireplumber_startup.log", "w") as file:
            file.write(bash("systemctl --user status wireplumber*"))
        # manually start pipewire and get verbose logs
        bash("systemctl --user stop pipewire*")
        Thread(target=run_pipewire, daemon=True).start()
        sleep(10)
        bash("killall pipewire")
        # restart pipewire
        try:
            bash("systemctl --user start pipewire")
        except subprocess.CalledProcessError:
            pass
    else:
        print_warning("Pipewire is not installed, skipping")


def collect_system_logs() -> None:
    print_status("Collecting dmi")
    mkdir("/tmp/logs-eupnea/dmi")
    try:
        cpdir("/sys/devices/virtual/dmi/id/", "/tmp/logs-eupnea/dmi")
    except subprocess.CalledProcessError:
        print_warning("Couldnt collect all dmi logs")
    print_status("Collecting pci devices")
    with open("/tmp/logs-eupnea/lspci.log", "w") as file:
        file.write(bash("LANG=C lspci -v"))

    print_status("Collecting kernel modules")
    with open("/tmp/logs-eupnea/lsmod.log", "w") as file:
        file.write(bash("LANG=C lsmod"))

    print_status("Collecting dmesg")
    with open("/tmp/logs-eupnea/dmesg.log", "w") as file:
        file.write(bash("LANG=C dmesg"))

    print_status("Collecting journalctl")
    with open("/tmp/logs-eupnea/journalctl.log", "w") as file:
        file.write(bash("LANG=C journalctl -b"))

    print_status("Collecting firmware tree")
    with open("/tmp/logs-eupnea/firmware-tree.log", "w") as file:
        file.write(create_tree("/lib/firmware"))

    print_status("Collecting ucm tree")
    with open("/tmp/logs-eupnea/ucm2-tree.log", "w") as file:
        file.write(create_tree("/usr/share/alsa/ucm2"))

    print_status("Collecting eupnea settings")
    cpfile("/etc/eupnea.json", "/tmp/logs-eupnea/eupnea-settings.log")


if __name__ == "__main__":
    if os.geteuid() == 0 and not path_exists("/tmp/username"):
        print_error("Please start the script as non-root/without sudo")
        exit(1)

    args = process_args()

    # Restart script as root
    if not os.geteuid() == 0:
        # pa logs need to be collected as non-root user
        set_verbose(True)
        try:
            rmdir("/tmp/logs-eupnea")
        except subprocess.CalledProcessError:  # just in case, the script should auto-remove those files on exit
            bash("sudo rm -rf /tmp/logs-eupnea")
        mkdir("/tmp/logs-eupnea", create_parents=True)
        if not args.hardware_only:
            print_header("Collecting audio related logs")
            collect_audio_logs()

        # save username
        with open("/tmp/username", "w") as file:
            file.write(bash("whoami").strip())  # get non root username. os.getlogin() seems to fail in chroots
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # read username
    with open("/tmp/username", "r") as file:
        user_id = file.read()
    rmfile("/tmp/username")

    set_verbose(True)

    if not args.audio_only:
        print_header("Collecting hardware related logs")
        collect_system_logs()

    print_header("Packing logs")
    os.chdir("/tmp/logs-eupnea")
    bash("tar -czf ../eupnea-logs.tar.gz ./")

    cpfile("/tmp/eupnea-logs.tar.gz",
           f"/home/{user_id}/Downloads/{time.strftime('%Y-%m-%d_%Hh-%Mm', time.localtime())}-eupnea-logs.tar.gz")
    # delete old tmp files
    rmdir("/tmp/logs-eupnea")

    print_header("Logs collected successfully")
    print_header(f"Please upload the tar in /home/{user_id}/Downloads/"
                 f"{time.strftime('%Y-%m-%d_%Hh-%Mm', time.localtime())}-eupnea-logs.tar.gz")
