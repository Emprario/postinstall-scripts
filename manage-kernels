#!/usr/bin/env python3

import os
import sys
import json
import argparse
from urllib.error import URLError
from urllib.request import urlretrieve, urlopen

from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--update', dest="update", action="store_true", default=False, help="Update main kernel")
    parser.add_argument('-b', '--backup', dest="backup", default=False, action="store_true",
                        help="Force backup current kernel to second partition. Usually its done automatically.")
    parser.add_argument('-r', '--restore', dest="restore_backup", default=False, action="store_true",
                        help="Restore kernel backup from storage. Use '-p' to specify a local backup file.")
    parser.add_argument('-p', '--local-path', dest="local_path",
                        help="Local path for kernel files to use instead of downloading from github.")
    parser.add_argument("--dev", action="store_true", dest="dev_build", default=False,
                        help="Use kernels from latest dev build. May be unstable.")
    parser.add_argument("--stable", action="store_true", dest="stable", default=False,
                        help="Use stable kernel.")
    parser.add_argument("--alt", action="store_true", dest="alt", default=False,
                        help="Use alt kernel. Recommended for older devices.")
    parser.add_argument("--exp", action="store_true", dest="exp", default=False,
                        help="Use experimental 5.15 chromeos kernel. It is newer, but Google does not use "
                             "it in production yet.")
    parser.add_argument("--mainline", action="store_true", dest="mainline", default=False,
                        help="Use mainline linux kernel instead of the chromeos kernel. Might provide more "
                             "functionality on newer devices.")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Print more output")
    return parser.parse_args()


def check_version() -> None:
    if args.dev_build:
        return  # dev versions have no versioning
    if not stored_settings["kernel_type"] == selected_kernel_type:
        return
    else:
        print_status("Checking for new kernel version")
        if args.mainline or stored_settings["kernel_type"] == "mainline":
            url = "https://api.github.com/repos/eupnea-linux/mainline-kernel/releases/latest"
        else:
            url = "https://api.github.com/repos/eupnea-linux/chromeos-kernel/releases/latest"
        data_json = json.loads(urlopen(url).read())
        if data_json["tag_name"] == stored_settings["kernel_version"]:
            print_status("Kernel is already up to date")
            exit(0)
        else:
            return


# Clean old depthboot files from /tmp
def prepare_host() -> None:
    print_status("Preparing host system")

    print_status("Cleaning + preparing host system")
    rmdir("/tmp/kernel-update")
    mkdir("/tmp/kernel-update/modules", create_parents=True)


# download kernel files from GitHub
def download_kernel() -> str:
    # select correct link
    if args.dev_build:
        url = "https://github.com/eupnea-linux/chromeos-kernel/releases/download/dev-build/"
    else:
        url = "https://github.com/eupnea-linux/chromeos-kernel/releases/latest/download/"

    # download kernel files
    try:
        match selected_kernel_type:
            case "mainline":
                print_status("Downloading mainline kernel")
                url = "https://github.com/eupnea-linux/mainline-kernel/releases/latest/download/"
                urlretrieve(f"{url}bzImage-stable", filename="/tmp/kernel-update/bzImage")
                urlretrieve(f"{url}modules-stable.tar.xz", filename="/tmp/kernel-update/modules.tar.xz")
                urlretrieve(f"{url}headers-stable.tar.xz", filename="/tmp/kernel-update/headers.tar.xz")
            case "alt":
                print_status("Downloading alt kernel")
                urlretrieve(f"{url}bzImage-alt", filename="/tmp/kernel-update/bzImage")
                urlretrieve(f"{url}modules-alt.tar.xz", filename="/tmp/kernel-update/modules.tar.xz")
                urlretrieve(f"{url}headers-alt.tar.xz", filename="/tmp/kernel-update/headers.tar.xz")
            case "exp":
                print_status("Downloading experimental 5.15 kernel")
                urlretrieve(f"{url}bzImage-exp", filename="/tmp/kernel-update/bzImage")
                urlretrieve(f"{url}modules-exp.tar.xz", filename="/tmp/kernel-update/modules.tar.xz")
                urlretrieve(f"{url}headers-exp.tar.xz", filename="/tmp/kernel-update/headers.tar.xz")
            case "stable":
                print_status("Downloading stable 5.10 kernel")
                urlretrieve(f"{url}bzImage-stable", filename="/tmp/kernel-update/bzImage")
                urlretrieve(f"{url}modules-stable.tar.xz", filename="/tmp/kernel-update/modules.tar.xz")
                urlretrieve(f"{url}headers-stable.tar.xz", filename="/tmp/kernel-update/headers.tar.xz")

        print_status("Getting kernel version")
        if selected_kernel_type == "mainline":
            url = "https://api.github.com/repos/eupnea-linux/mainline-kernel/releases/latest"
        else:
            url = "https://api.github.com/repos/eupnea-linux/chromeos-kernel/releases/latest"
        return json.loads(urlopen(url).read())["tag_name"]
    except URLError:
        print_error("Failed to reach github. Check your internet connection and try again or use local files with -l")
        exit(1)

    print_status("Kernel files downloaded successfully")


# Configure distro agnostic options
def flash_kernel() -> None:
    print_status("Flashing new kernel")

    # Extract modules
    print_status("Extracting kernel modules")
    # Extract modules to temporary location
    bash(f"tar xpf /tmp/kernel-update/modules.tar.xz -C /tmp/kernel-update/modules --checkpoint=.10000")
    print("")  # break line after tar
    # read kernel modules version
    new_modules_version = bash(f"ls /tmp/kernel-update/modules").strip()  # get new modules dir name
    rmdir(f"/lib/modules/{new_modules_version}")  # remove all old modules
    # move new modules to /lib/modules
    bash(f"mv /tmp/kernel-update/modules/{new_modules_version} /lib/modules/{new_modules_version}")

    # Extract kernel headers
    print_status("Extracting kernel headers")
    mkdir(f"/usr/src/linux-headers-{new_modules_version}")
    rmdir(f"/usr/src/linux-headers-{new_modules_version}")  # remove old headers files
    bash(f"tar xpf /tmp/kernel-update/headers.tar.xz -C /usr/src/linux-headers-{new_modules_version}/ "
         f"--checkpoint=.10000")
    print("")  # break line after tar
    bash(f"ln -s /usr/src/linux-headers-{new_modules_version}/ /lib/modules/{new_modules_version}/build")

    cpfile("/proc/cmdline", "/tmp/kernel-update/kernel.flags")  # Reuse current kernel flags

    print_status("Signing kernel")
    bash("futility vbutil_kernel --arch x86_64 --version 1 --keyblock /usr/share/vboot/devkeys/kernel.keyblock "
         "--signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --bootloader /tmp/kernel-update/kernel.flags "
         "--config /tmp/kernel-update/kernel.flags --vmlinuz /tmp/kernel-update/bzImage --pack "
         "/tmp/kernel-update/bzImage.signed")

    print_status("Flashing kernel")
    bash(f"dd if=/tmp/kernel-update/bzImage.signed of={device}1")


if __name__ == "__main__":
    if os.geteuid() == 0 and not path_exists("/tmp/.root_ok"):
        print_error("Please start the script as non-root/without sudo")
        exit(1)

    args = process_args()

    # Restart script as root
    if not os.geteuid() == 0:
        # install kernel packages before elevating to root, as makepkg needs to be run as non-root
        install_kernel_packages()
        # create empty file to confirm script was started as non-root
        with open("/tmp/.root_ok", "w") as file:
            file.write("")
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # delete file to confirm script was started as root
    rmfile("/tmp/.root_ok")
    if args.backup:
        print_status("Backing up current kernel")
        rmfile("/opt/kernel-backup")  # remove old backup
        print_status("Reading partition table")
        partitions = bash("mount | grep ' / ' | cut -d' ' -f 1")
        partitions = partitions[:len(partitions) - 1]  # get device "name"
        bash(f"dd if={partitions}1 of={partitions}2")
        print_header("Backuped up kernel successfully")
        exit(0)
    if args.restore_backup:
        print_status("Restoring backed up kernel")
        print_status("Reading partition table")
        partitions = bash("mount | grep ' / ' | cut -d' ' -f 1")
        partitions = partitions[:len(partitions) - 1]  # get device "name"
        # Restore kernel
        bash(f"dd if={partitions}2 of={partitions}1")
        print_header("Restored kernel successfully")
        exit(0)
    if not (args.restore_backup or args.backup or args.update):
        print_error("No action specified. Available actions: --backup, --restore, --update. Use -h for more info")
        exit(1)
    if args.stable:
        print_warning("Using stable kernel")
        selected_kernel_type = "stable"
    if args.dev_build:
        print_warning("Using dev release")
    if args.alt:
        print_warning("Using alt kernel")
        selected_kernel_type = "alt"
    if args.exp:
        print_warning("Using experimental kernel")
        selected_kernel_type = "exp"
    if args.mainline:
        print_warning("Using mainline kernel")
        selected_kernel_type = "mainline"
    if args.local_path:
        print_warning("Using local path")
    if args.verbose:
        print_warning("Verbosity increased")
        set_verbose(args.verbose)  # enable verbose output in functions.py

    # read settings file
    with open("/etc/eupnea.json", "r") as file:
        stored_settings = json.load(file)

    # If user didn't set a kernel type cli option, check online for a newer version before updating
    if not (args.stable or args.alt or args.exp or args.mainline):
        selected_kernel_type = stored_settings["kernel_type"]  # read kernel version from settings file

    check_version()

    print_status(f"Updating kernel type: {selected_kernel_type}")

    # read root partition mount
    root_part = bash("mount | grep ' / ' | cut -d' ' -f 1")
    device = root_part[:len(root_part) - 1]  # get device "name"

    prepare_host()
    if args.local_path is None:  # Download files from GitHub
        new_kernel_version = download_kernel()
    else:  # if local path is specified, copy files from it, instead of downloading from the internet
        # clean local path string
        if not args.local_path.endswith("/"):
            kernel_path = f"{args.local_path}/"
        else:
            kernel_path = args.local_path
        print_status("Copying local files to /tmp/kernel-update")
        cpfile(f"{kernel_path}bzImage", "/tmp/kernel-update/bzImage")
        cpfile(f"{kernel_path}modules.tar.xz", "/tmp/kernel-update/modules.tar.xz")
        cpfile(f"{kernel_path}headers.tar.xz", "/tmp/kernel-update/headers.tar.xz")
        new_kernel_version = "local"

    flash_kernel()

    # if on Fedora, the modules need to be relabeled, otherwise SELinux will not allow loading them
    if stored_settings["distro_name"] == "fedora":
        print_status("Relabeling modules")
        bash("fixfiles restore /lib/modules")

    # Update settings file
    print_status("Updating settings file")
    updated_settings = stored_settings
    updated_settings["kernel_type"] = selected_kernel_type
    updated_settings["kernel_version"] = new_kernel_version
    if args.dev_build:
        updated_settings["dev_build"] = True
    else:
        updated_settings["dev_build"] = False
    with open("/etc/eupnea.json", "w") as file:
        json.dump(updated_settings, file)

    print_header("Kernel update complete! Please reboot to use the new kernel")
    input("\033[92m" + "Press ENTER to reboot or CTRL+C to cancel reboot" + "\033[0m")
    bash("reboot")
