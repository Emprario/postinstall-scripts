#!/usr/bin/env python3

import os
import sys
import json
from functions import *


# Expand root partition to whole drive
def expand_rootfs() -> None:
    with open("/etc/eupnea.json", "r") as file:
        eupnea_settings = json.load(file)
    if eupnea_settings["install_type"] == "image":  # only resize on image installs
        # read root partition mount
        root_part = bash("mount | grep ' / ' | cut -d' ' -f 1")
        root_part = root_part[:-1]  # get device "name"
        if root_part[-1] == "p":  # internal drive / sd card has a "p" at the end
            bash(f"growpart {root_part[:-1]} 2")  # grow root partition
            bash(f"partprobe {root_part[:-1]}")  # reload partition table
            bash(f"resize2fs {root_part}2")  # expand root partition
        else:  # usb drive
            bash(f"growpart {root_part} 3")  # grow root partition
            bash(f"partprobe {root_part}")  # reload partition table
            bash(f"resize2fs {root_part}3")  # expand root partition

        # set install type to direct to prevent postinstall from expanding again
        eupnea_settings["install_type"] = "expanded-image"
        with open("/etc/eupnea.json", "w") as file:
            json.dump(eupnea_settings, file)


# This only pinns browser and software manager to the dock and removes mounted drives from it. NOTHING ELSE IS MODIFIED
def customize_gnome() -> None:
    pass
    # not possible due to missing dbus as root user and not knowing username
    '''
    print_status("Customizing Gnome")
    bash('dconf write /org/gnome/shell/favorite-apps \"[\'org.gnome.Epiphany.desktop\', \'org.gnome.Software'
         '.desktop\', \'org.gnome.Nautilus.desktop\', \'yelp.desktop\']\"')
    # remove internal mounts as there is about 5 of them
    bash("dconf write /org/gnome/shell/extensions/dash-to-dock/show-mounts false")
    '''


def device_fixes() -> None:
    with open("/sys/devices/virtual/dmi/id/product_name", "r") as file:
        product_name = file.read().strip().lower()
    match product_name:
        case "sona" | "laser":
            # Apply fix for display driver
            # TODO: Add multitouch support

            # copy systemd file from config
            cpfile("/etc/eupnea/device-specific/sona_laser/touchscreen-fix.service",
                   "/etc/systemd/system/touchscreen-fix.service")
            # enable service
            bash("systemctl enable touchscreen-fix.service")

        # all Picasso/deli amd devices
        case "berknip" | "dirinboz" | "ezkinil" | "gumboz" | "morphius" | "vilboz" | "vilboz360" | "woomax":
            # Copy ucm config for amd audio
            mkdir("/usr/share/alsa/ucm2/AMD/acp3xalc5682m98")
            # cp ucm configs
            cpfile("/etc/eupnea/device-specific/amd-ucm/HiFi.conf",
                   "/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/HiFi.conf")
            cpfile("/etc/eupnea/device-specific/amd-ucm/acp3xalc5682m98.conf",
                   "/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/acp3xalc5682m98.conf")
            # create conf.d symlink
            mkdir("/usr/share/alsa/ucm2/conf.d/acp3xalc5682m98")
            bash("ln -s /usr/share/alsa/ucm2/AMD/acp3xalc5682m98/acp3xalc5682m98.conf "
                 "/usr/share/alsa/ucm2/conf.d/acp3xalc5682m98/acp3xalc5682m98.conf")


def distro_fixes() -> None:
    with open("/etc/eupnea.json", "r") as file:
        eupnea_json = json.load(file)

    match eupnea_json["distro_name"]:
        case "fedora":
            # Relabel files that couldn't be relabeled during install
            bash("fixfiles relabel /lib/systemd/system-generators/systemd-gpt-auto-generator")
        case "ubuntu":
            if eupnea_json["de_name"] == "deepin":
                # When installing from chroot the kernel modules are not installed
                # Therefore the modules are installed when booting for the first time
                bash("apt-get install -y ubuntudde-dde")


def set_hostname() -> None:
    # Get the board name from dmi
    with open("/sys/devices/virtual/dmi/id/product_name", "r") as dmi:
        device_board = dmi.read().lower().strip()
    # Set hostname
    bash(f"hostnamectl hostname {device_board}")


if __name__ == "__main__":
    # Elevate script to root
    if not os.geteuid() == 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    set_verbose(True)  # always run verbose

    expand_rootfs()
    # customize_gnome()
    device_fixes()
    set_hostname()

    # disable postinstall systemd service
    bash("systemctl disable postinstall.service")
