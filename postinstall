#!/usr/bin/env python3

import os
import sys
import json
from functions import *


# Expand root partition to whole drive
def expand_rootfs() -> None:
    if install_type == "image" or install_type == "internal":  # do not resize on direct installs
        # read root partition mount
        root_part = bash("mount | grep ' / ' | cut -d' ' -f 1")
        root_part = root_part[:-1]  # get device "name"
        if install_type == "internal":
            root_part = root_part[:-1]  # remove "p" from device name

        bash(f"growpart {root_part} 2")  # grow root partition
        bash(f"partprobe {root_part}")  # reload partition table
        if install_type == "image":
            bash(f"resize2fs {root_part}2")  # expand root partition
        elif install_type == "internal":
            bash(f"resize2fs {root_part}p2")  # expand root partition


# This only pinns browser and software manager to the dock and removes mounted drives from it. NOTHING ELSE IS MODIFIED
def customize_gnome() -> None:
    pass
    # not possible due to missing dbus as root user and not knowing username
    '''
    print_status("Customizing Gnome")
    bash('dconf write /org/gnome/shell/favorite-apps \"[\'org.gnome.Epiphany.desktop\', \'org.gnome.Software'
         '.desktop\', \'org.gnome.Nautilus.desktop\', \'yelp.desktop\']\"')
    # remove internal mounts as there is about 5 of them
    bash("dconf write /org/gnome/shell/extensions/dash-to-dock/show-mounts false")
    '''


def device_fixes() -> None:
    with open("/sys/devices/virtual/dmi/id/product_name", "r") as file:
        product_name = file.read().strip().lower()
    match product_name:
        case "sona" | "laser":
            # Apply fix for display driver
            # TODO: Add multitouch support

            # copy systemd file from config
            cpfile("/etc/eupnea/device-specific/sona_laser/touchscreen-fix.service",
                   "/etc/systemd/system/touchscreen-fix.service")
            # enable service
            bash("systemctl enable touchscreen-fix.service")

        # all Picasso/deli amd devices
        case "berknip" | "dirinboz" | "ezkinil" | "gumboz" | "morphius" | "vilboz" | "vilboz360" | "woomax":
            # Copy ucm config for amd audio
            mkdir("/usr/share/alsa/ucm2/AMD/acp3xalc5682m98")
            # cp ucm configs
            cpfile("/etc/eupnea/device-specific/amd-ucm/HiFi.conf",
                   "/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/HiFi.conf")
            cpfile("/etc/eupnea/device-specific/amd-ucm/acp3xalc5682m98.conf",
                   "/usr/share/alsa/ucm2/AMD/acp3xalc5682m98/acp3xalc5682m98.conf")
            # create conf.d symlink
            mkdir("/usr/share/alsa/ucm2/conf.d/acp3xalc5682m98")
            bash("ln -s /usr/share/alsa/ucm2/AMD/acp3xalc5682m98/acp3xalc5682m98.conf "
                 "/usr/share/alsa/ucm2/conf.d/acp3xalc5682m98/acp3xalc5682m98.conf")


if __name__ == "__main__":
    # Elevate script to root
    if not os.geteuid() == 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    set_verbose(True)  # always run verbose

    with open("/etc/eupnea.json", "r") as file:
        install_type = json.load(file)["install_type"]

    expand_rootfs()
    # customize_gnome()
    device_fixes()

    # delete postinstall systemd service
    bash("systemctl disable postinstall.service")
    cpfile("/etc/systemd/system/postinstall.service", "/etc/systemd/system/postinstall.service.disabled")
    rmfile("/etc/systemd/system/postinstall.service")
